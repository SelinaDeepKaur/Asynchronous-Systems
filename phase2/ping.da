import sys
import nacl.utils
from random import *
from nacl.public import PrivateKey,Box
from nacl.encoding import Base64Encoder

def readConfigFile():
    print("---------------ENTERING readConfigFile ---------------------")
    config = dict()
    with open('config.csv','r') as f:  
        for line in f:
            if line[0] != '#':
                (key,sep,val) = line.partition('=')
                # if the line does not contain '=', it is invalid and hence ignored
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val
    # print(config)
    return config

def signTheStatement(box,message):
    return box.encrypt(message)

def createABox(prKey,pubKey):
    return Box(prKey, pubKey)

def unsignTheStatement(box,messaage):
    return box.decrypt(message)       
    
class Olympus(process):
    globalConfig = dict()
    clients = []
    replicas = []
    publicKeyClients =dict()
    publicKeyReplicas=dict()
    privateKeyClients =dict()
    privateKeyReplicas=[]
    def setup():
        print("---------------ENTERING Olymus:setup ---------------------")

        # self.globalConfig = readConfigFile()
        # readGlobalConfigFile()
        initialSetup()
        # privateKeyClients,publicKeyClients = createClientKeys()
        # print(privateKeyClients)
        # privateKeyReplicas,publicKeyReplicas=createReplicaKeys()
        # clients = createClientProcesses(privateKeyClients)
        # replicas = createReplicaProcesses(privateKeyReplicas,publicKeyClients,publicKeyReplicas)
        # createProcesses()
        print()

    def run():
        a = False

        #print(globalConfig)
        await(received(('requestConfiguration',)))#, from_=p))
        # await(len(listof(p, received(('requestConfiguration',), from_=p))) == 1)
        await(received(('Received Configuration',)))
        #await(received(('reconfigurationRequests',)))
        output('terminating')

    def receive(msg=('requestConfiguration',), from_=p):
        print("---------------ENTERING olympus:receieve:requestConfiguration---------------------")
        print(p)
        Configuration = replicas
        send((Configuration,), to=p)
	
    def readGlobalConfigFile():
        print("---------------ENTERING Olymus:readGlobalConfigFile ---------------------")
        globalConfig = readConfigFile()


    def initialSetup():
        print("---------------ENTERING Olymus:initialSetup ---------------------")
        globalConfig = readConfigFile()
        privateKeyClients,publicKeyClients = createClientKeys()
        privateKeyReplicas,publicKeyReplicas=createReplicaKeys()
        clients = createClientProcesses(privateKeyClients)
        replicas = createReplicaProcesses(privateKeyReplicas,clients,publicKeyReplicas)


    # def createProcesses():
    #     print("---------------ENTERING createProcesses ---------------------")
    #     globalConfig = readConfigFile()
    #     clients = createClientProcesses()
    #     replicas = createReplicaProcesses()
    #     print("---------------CREATED CLIENT AND REPLICA PROCESSES:: createProcesses ---------------------")

    #     print(clients)
    #     print(replicas)
        #setupClientProcesses(clients,publ)
        # setupReplicaProcesses(replicas,clients)
        #startProcesses()

	
    def createClientKeys():
        print("---------------ENTERING Olymus:createClientKeys ---------------------")
        tempPublicKeys=dict()
        tempPrivateKeys=dict()
        noOfClients = globalConfig['num_client']
        print(noOfClients)
        # hosts = globalConfig['hosts'].split(';')
        # client_hosts=globalConfig['client_hosts'].split(';')
        for i in range(noOfClients):
            print("---------------Did I reach here Olymus:setup ---------------------")

            # processAtNode = 'Client'+str(i)+'@'+hosts[int(client_hosts[int(i)].strip())].strip() 
            processAtPrKey = PrivateKey.generate()
            processAtPuKey = processAtPrKey.public_key

            tempPrivateKeys[i] =  processAtPrKey
            tempPublicKeys[i] =  processAtPuKey

        print("---------------Did I reach here 2 Olymus:setup ---------------------")

        return tempPrivateKeys,tempPublicKeys

    def createReplicaKeys():
        print("---------------ENTERING Olymus:createReplicaKeys ---------------------")

        tempPublicKeys=dict()
        tempPrivateKeys=dict()
        noOfReplicas = 2*globalConfig['t'] + 1
        # hosts = globalConfig['hosts'].split(';')
        # replica_hosts=globalConfig['replica_hosts'].split(';')

        for i in range(noOfReplicas):
            # processAtNode = 'Replica'+str(i)+'@'+hosts[int(replica_hosts[int(i)].strip())].strip()
            processAtPrKey = PrivateKey.generate()
            processAtPuKey = processAtPrKey.public_key

            tempPrivateKeys[i] =  processAtPrKey
            tempPublicKeys[i] =  processAtPuKey
        return tempPrivateKeys,tempPublicKeys
        
	
    def createClientProcesses(privateKeyClients):       
        tempClients =[]
        tempPublicKeys=dict()
        tempPrivateKeys=dict()
        print("---------------ENTERING CLIENT CREATE PROCESS---------------------")
        noOfClients = globalConfig['num_client']
        hosts = globalConfig['hosts'].split(';')
        client_hosts=globalConfig['client_hosts'].split(';')
        
        for i in range(noOfClients):
            processAtNode = 'Client'+str(i)+'@'+hosts[int(client_hosts[int(i)].strip())].strip()            
            client = new(Client, at=processAtNode)
            setup(client, (self,i,privateKeyClients[i],))
            start(client)
            #tempClients.insert(i,(client,publicKeyReplicas[i]))
            tempClients.insert(i,(client,publicKeyClients[i]))
        
        return tempClients

    def createReplicaProcesses(privateKeyReplicas,clients,publicKeyReplicas):
        print("---------------ENTERING REPLICA CREATE PROCESS---------------------")
        tempReplicas =dict()
        noOfReplicas = 2*globalConfig['t'] + 1
        hosts = globalConfig['hosts'].split(';')
        replica_hosts=globalConfig['replica_hosts'].split(';')

        for i in range(noOfReplicas):
            processAtNode = 'Replica'+str(i)+'@'+hosts[int(replica_hosts[int(i)].strip())].strip()
            replica = new(Replica,at=processAtNode)
            setup(replica, (self,i,'ACTIVE',privateKeyReplicas[i],clients,publicKeyReplicas,))
            start(replica)
            tempReplicas[i] = (replica,publicKeyReplicas[i])
            # tempReplicas.insert(i,(replica,publicKeyReplicas[i]))

        return tempReplicas

    def createConfiguration():
        pass


    def setupProcesses():
        print("---------------ENTERING setupProcesses ---------------------")
        for i in range(noOfClients):
            setup(client[i], args=(self,))

    def startProcesses():
        print("---------------ENTERING startProcesses ---------------------")
        for i in range(noOfClients):
            start(client[i])


        
		
		

class Client(process):
    globalConfig = dict()

    def setup(p,i,privateKeyClient,): 
        pass
    
    def run():
        # print(processAtPrKey.encode(Base64Encoder))
        print("---------------ENTERING client:run---------------------")
        send(('requestConfiguration',), to=p)
        await(some(received((Configuration), from_=p)))
        
        #send(('requestConfiguration',), to=p)

    def receive(msg=(Configuration,), from_=p):
        print("---------------ENTERING client:receieve:Configuration---------------------")
        #config=readConfigFile()
        #noOfReplicas =  2*config('t')+1
        #output(noOfReplicas)
        # print(Configuration)
        print(len(Configuration))
        for x in range(len(Configuration)):
            print('Replica:',Configuration[x])
        operations = getOperations().split(';')
        print(operations)
        for i in range(len(operations)):
             sendRequest(operations[i],Configuration[0])
        send(('Received Configuration',), to=p)

    def getOperations():
        globalConfig = readConfigFile()
        print(self.i)
        return globalConfig['workload['+str(self.i)+']']

    def sendRequest(operation,receiver):
        requestID = returnRandomNumber()
        print('requestID: ',requestID)
        print(operation)
        # requestStatement = b'initial'
        # requestStatement = bytes((requestID,str(operation.strip()),'initial'), 'utf8')
        requestStatement = (requestID,str(operation.strip()),'initial')
        strRequestStatment = bytes(str(requestStatement),'utf8')
        print(strRequestStatment)
        box = createABox(privateKeyClient,receiver[1])
        signedRequestStatement = signTheStatement(box,strRequestStatment)
        print(receiver[0])
        send(('done',), to=receiver[0])
        send((i,signedRequestStatement,), to=receiver[0])
        print(signedRequestStatement)



    def returnRandomNumber():
        return randint(1, 10000)


class Replica(process):
    def setup(p,i,Mode,privateKeyReplica,clients,publicKeyReplicas):pass
    def run():
        print('---------------------ENTERING Replica:run-----------------------')
        print(p)
        await(some(received((clientId,signedRequestStatement), from_=c)))
        await(received(('done',)))

    # def receive(msg=(Configuration,), from_=p):
    def receive(msg=(clientId,signedRequestStatement,), from_=c):
        print('---------------------ENTERING Replica:receive:signedRequestStatement-----------------------')
        print("---------------The signed statement with clientID---------------------")
        print(clientId)
        print(signedRequestStatement)
        unbox = createABox(privateKeyReplica,clients[clientId][1])
        plaintext = unbox.decrypt(signedRequestStatement)
        print("-------------Decrypted Message-------------")
        print(plaintext)

    def receive(msg=('done',), from_=d):
        print("---------------ENTERING olympus:receieve:requestConfiguration---------------------")
        print("---------------DONE---------------------")


def main():
    print("---------------ENTERING main---------------------")
    olympus = new(Olympus,args=())
    #client = new(Client,args=(olympus,), at='Client')
    #setup(client, args=(olympus,))
    #start(client)
    start(olympus)