import sys
import nacl.utils
from random import *
import nacl.encoding
import nacl.signing
# from nacl.public import PrivateKey,Box
# from nacl.encoding import Base64Encoder

def readConfigFile():
    print("---------------ENTERING readConfigFile ---------------------")
    config = dict()
    with open('config.csv','r') as f:  
        for line in f:
            if line[0] != '#':
                (key,sep,val) = line.partition('=')
                # if the line does not contain '=', it is invalid and hence ignored
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val
    # print(config)
    return config

def signTheStatement(signing_key,message):
    return signing_key.sign(message)

# def createABox(prKey,pubKey):
#     return Box(prKey, pubKey)

def decodeVerifyKey(verify_key_hex):
    return nacl.signing.VerifyKey(verify_key_hex, encoder=nacl.encoding.HexEncoder)

def verifyTheStatement(verify_key,signed):
    return verify_key.verify(signed)       
    
class Olympus(process):
    globalConfig = dict()
    clients = []
    replicas = []
    # publicKeyClients =dict()
    # publicKeyReplicas=dict()
    # privateKeyClients =dict()
    # privateKeyReplicas=[]
    def setup():
        print("---------------ENTERING Olymus:setup ---------------------")
        self.terminate = False
        self.client_signing_keys=dict()
        self.client_verify_keys_hex= dict()
        self.replica_signing_keys=dict()
        self.replica_verify_keys_hex= dict()
        # self.globalConfig = readConfigFile()
        # readGlobalConfigFile()
        initialSetup()
        # privateKeyClients,publicKeyClients = createClientKeys()
        # print(privateKeyClients)
        # privateKeyReplicas,publicKeyReplicas=createReplicaKeys()
        # clients = createClientProcesses(privateKeyClients)
        # replicas = createReplicaProcesses(privateKeyReplicas,publicKeyClients,publicKeyReplicas)
        # createProcesses()
        print()

    def run():
        a = False
        await(terminate)

        #print(globalConfig)
        # await(received(('requestConfiguration',)))#, from_=p))
        # await(len(listof(p, received(('requestConfiguration',), from_=p))) == 1)
        # await(received(('Received Configuration',)))
        #await(received(('reconfigurationRequests',)))
        output('terminating')

    def receive(msg=('requestConfiguration',), from_=p):
        print("---------------ENTERING olympus:receieve:requestConfiguration---------------------")
        print(p)
        Configuration = replicas
        send((Configuration,), to=p)
	
    def readGlobalConfigFile():
        print("---------------ENTERING Olymus:readGlobalConfigFile ---------------------")
        globalConfig = readConfigFile()


    def initialSetup():
        print("---------------ENTERING Olymus:initialSetup ---------------------")
        globalConfig = readConfigFile()
        noOfClients = globalConfig['num_client']
        noOfReplicas = 2*globalConfig['t'] + 1
        # privateKeyClients,publicKeyClients = createClientKeys()
        # privateKeyReplicas,publicKeyReplicas=createReplicaKeys()
        client_signing_keys, client_verify_keys_hex = createKeys(noOfClients)
        clients = createClientProcesses(client_signing_keys)
        replica_signing_keys, replica_verify_keys_hex = createKeys(noOfReplicas)
        replicas = createReplicaProcesses(replica_signing_keys,clients,replica_verify_keys_hex)
        # clients = createClientProcesses(privateKeyClients)
        # replicas = createReplicaProcesses(privateKeyReplicas,clients,publicKeyReplicas)


    # def createProcesses():
    #     print("---------------ENTERING createProcesses ---------------------")
    #     globalConfig = readConfigFile()
    #     clients = createClientProcesses()
    #     replicas = createReplicaProcesses()
    #     print("---------------CREATED CLIENT AND REPLICA PROCESSES:: createProcesses ---------------------")

    #     print(clients)
    #     print(replicas)
        #setupClientProcesses(clients,publ)
        # setupReplicaProcesses(replicas,clients)
        #startProcesses()

    def createKeys(number):
        print("---------------ENTERING Olymus:createKeys ---------------------")
        signing_keys = dict()
        verify_keys_hex = dict()
        for i in range(number):
            signing_key=nacl.signing.SigningKey.generate()
            verify_key = signing_key.verify_key
            verify_key_hex = verify_key.encode(encoder=nacl.encoding.HexEncoder)
            signing_keys[i] = signing_key
            verify_keys_hex[i] = verify_key_hex
        return signing_keys,verify_keys_hex



    # def createClientKeys():
    #     print("---------------ENTERING Olymus:createClientKeys ---------------------")
    #     tempPublicKeys=dict()
    #     tempPrivateKeys=dict()
    #     noOfClients = globalConfig['num_client']
    #     print(noOfClients)
    #     # hosts = globalConfig['hosts'].split(';')
    #     # client_hosts=globalConfig['client_hosts'].split(';')
    #     for i in range(noOfClients):

    #         # processAtNode = 'Client'+str(i)+'@'+hosts[int(client_hosts[int(i)].strip())].strip() 
    #         processAtPrKey = PrivateKey.generate()
    #         processAtPuKey = processAtPrKey.public_key

    #         tempPrivateKeys[i] =  processAtPrKey
    #         tempPublicKeys[i] =  processAtPuKey


    #     return tempPrivateKeys,tempPublicKeys

    # def createReplicaKeys():
    #     print("---------------ENTERING Olymus:createReplicaKeys ---------------------")

    #     tempPublicKeys=dict()
    #     tempPrivateKeys=dict()
    #     noOfReplicas = 2*globalConfig['t'] + 1
    #     # hosts = globalConfig['hosts'].split(';')
    #     # replica_hosts=globalConfig['replica_hosts'].split(';')

    #     for i in range(noOfReplicas):
    #         # processAtNode = 'Replica'+str(i)+'@'+hosts[int(replica_hosts[int(i)].strip())].strip()
    #         processAtPrKey = PrivateKey.generate()
    #         processAtPuKey = processAtPrKey.public_key

    #         tempPrivateKeys[i] =  processAtPrKey
    #         tempPublicKeys[i] =  processAtPuKey
    #     return tempPrivateKeys,tempPublicKeys
        
	
    def createClientProcesses(client_signing_keys):       
        tempClients =[]
        print("---------------ENTERING CLIENT CREATE PROCESS---------------------")
        noOfClients = globalConfig['num_client']
        hosts = globalConfig['hosts'].split(';')
        client_hosts=globalConfig['client_hosts'].split(';')
        
        for i in range(noOfClients):
            processAtNode = 'Client'+str(i)+'@'+hosts[int(client_hosts[int(i)].strip())].strip()            
            client = new(Client, at=processAtNode)
            setup(client, (self,i,client_signing_keys[i],))
            start(client)
            #tempClients.insert(i,(client,publicKeyReplicas[i]))
            tempClients.insert(i,(client,client_verify_keys_hex[i]))
        
        return tempClients

    def createReplicaProcesses(replica_signing_keys,clients,replica_verify_keys_hex):
        print("---------------ENTERING REPLICA CREATE PROCESS---------------------")
        tempReplicas =dict()
        noOfReplicas = 2*globalConfig['t'] + 1
        hosts = globalConfig['hosts'].split(';')
        replica_hosts=globalConfig['replica_hosts'].split(';')

        for i in range(noOfReplicas):
            processAtNode = 'Replica'+str(i)+'@'+hosts[int(replica_hosts[int(i)].strip())].strip()
            replica = new(Replica,at=processAtNode)
            tempReplicas[i] = (replica,replica_verify_keys_hex[i])
            # tempReplicas.insert(i,(replica,publicKeyReplicas[i]))

        for i in range(noOfReplicas):
            setup(tempReplicas[i][0], (self,i,'ACTIVE',replica_signing_keys[i],clients,tempReplicas,))
            start(tempReplicas[i][0])
            
        return tempReplicas

    def createConfiguration():
        pass


    def setupProcesses():
        print("---------------ENTERING setupProcesses ---------------------")
        for i in range(noOfClients):
            setup(client[i], args=(self,))

    def startProcesses():
        print("---------------ENTERING startProcesses ---------------------")
        for i in range(noOfClients):
            start(client[i])


        
		
		

class Client(process):
    globalConfig = dict()

    def setup(p,clientID,client_signing_key,): 
        self.terminate = False
    
    def run():
        # print(processAtPrKey.encode(Base64Encoder))
        print("---------------ENTERING client:run---------------------")
        send(('requestConfiguration',), to=p)
        # await(some(received((Configuration), from_=p)))
        await(terminate)
        
        #send(('requestConfiguration',), to=p)

    def receive(msg=(Configuration,), from_=p):
        print("---------------ENTERING client:receieve:Configuration---------------------")
        #config=readConfigFile()
        #noOfReplicas =  2*config('t')+1
        #output(noOfReplicas)
        # print(Configuration)
        print(len(Configuration))
        for x in range(len(Configuration)):
            print('Replica:',Configuration[x])
        operations = getOperations().split(';')
        print(operations)
        for i in range(len(operations)):
             sendRequest(operations[i],Configuration[0])
        send(('Received Configuration',), to=p)

    def getOperations():
        globalConfig = readConfigFile()
        return globalConfig['workload['+str(self.clientID)+']']

    def sendRequest(operation,receiver):
        requestID = returnRandomNumber()
        print('requestID: ',requestID)
        print(operation)
        # requestStatement = b'initial'
        # requestStatement = bytes((requestID,str(operation.strip()),'initial'), 'utf8')
        requestStatement = bytes(operation.strip(),'utf8')
        #print(strRequestStatment)
        # box = createABox(client_signing_key,receiver[1])
        signedRequestStatement = signTheStatement(client_signing_key,requestStatement)
        print(receiver[0])
        # send(('done',), to=receiver[0])
        send((clientID,requestID,signedRequestStatement,'initial'), to=receiver[0])
        print(signedRequestStatement)



    def returnRandomNumber():
        return randint(1, 10000)


class Replica(process):
    replicaHistory = dict()
    slot=0
    
    def setup(p,i,Mode,replica_signing_key,clients,replicas):
        self.terminate = False
        self.data = dict()
    def run():
        print('---------------------ENTERING Replica:run-----------------------')
        print(p)
        print("------------------printing replicas with their public keys------------")
        print(replicas)
        # await(some(received((rho,requestID,signedRequestStatement,typeOfRequest,), from_=previousReplica)))
        await(terminate)
        # await(some(received((clientId,requestID,signedRequestStatement,typeOfRequest,), from_=c)))
        print('--------------------Something------------------------')
        #awaitbvreceived previous replica
        # await(received(('done',)))

    # def receive(msg=(Configuration,), from_=p):
    def receive(msg=(clientId,requestID,signedRequestStatement,typeOfRequest,), from_=c):
        print('---------------------ENTERING Replica:receive:signedRequestStatement-----------------------')
        print("---------------The signed statement with clientID---------------------")
        print(clientId)
        print(signedRequestStatement)
        
        unSignedRequestStatement = ''
        operation = ''
        if Mode == 'ACTIVE':
            print("-----------------------clientId---------------------------")
            print(clientId)
            print("-----------------------creating box for decrytion---------------------------")
            
            # unbox = createABox(privateKeyReplica,clients[clientId][1])
            print("-----------------------unsigning signedRequestStatement---------------------------")
            temp_verify_key = decodeVerifyKey(clients[1][1])
            #try:
            verified = ''
            try:
                verified = verifyTheStatement(temp_verify_key,signedRequestStatement)
            except:
                verified = 'Not verified'
            print("-----------------------parsing the unSignedRequestStatement---------------------------")
            
            # operation,key,value = parseTheUnsignedStatement(unSignedRequestStatement)
            print("-----------------------Printing Stuff---------------------------")
            
            # print(operation)
            # print(key)
            # print(value)
            # ret = executeOperation(operation,key,value)


            # print(ret)
            # print(data)

            #assignSlot(slot,operation)
            #slot+=1
            print("---------------The unsigned statement received from client---------------------")
            print(verified)
            print("---------------The parsed operations---------------------")
            #print(operation)
            #print(slot)
            # except:
            #     print("Exception")
            '''
            except Exception as ex:
                print("Exception")
                print(ex)
            '''                
       
        else:
            print('Replica is not active')
        
    #send statement to next replica
        print("-----------------")
        print(replicas[i+1])
        print("---------------sending shuttle to next replica0-------------")
        send((requestID,signedRequestStatement,'initial'), to=replicas[i+1][0])
        print("----------------- I ended ----------------------")


    def receive(msg=(requestID,signedRequestStatement,typeOfRequest),from_=previousReplica):
        print("---------------The signed statement from previous replica--------------------")
        #print(rho)
        print(signedRequestStatement)

         # if i!=2 and Mode == 'ACTIVE':
         #    unbox = createABox(privateKeyReplica,replicas[i-1][1])
         #    try:
         #        unSignedRequestStatement = unsignTheStatement(unbox,signedRequestStatement)
         #    except:
         #        print('Send Reconfiguration Request to Olympus')

        if i != 2:
            print('---------------  Reached here -------------------------')
            send((requestID,signedRequestStatement,'initial'), to=replicas[i+1][0])

        # r = executeOperation(operation)

        # orderStatement=('order',)

       
        print('-------------------- I ended -------------------------')

        # plaintext = unbox.decrypt(signedRequestStatement)
        # print("-------------Decrypted Message-------------")
        # print(unSignedRequestStatement)

    def assignSlot(s,o):
        replicaHistory[s] = ('order',o)
        print("---------------inside assignslot----")
        print(replicaHistory[s])
        

    def parseTheUnsignedStatement(unSignedRequestStatement):
        print("-----------------------parseTheUnsignedStatement---------------------------")
        inp = str(unSignedRequestStatement,'utf-8')[:-1]
        opKeyVal = inp.split('(')
        operation = opKeyVal[0]
        keyVal = opKeyVal[1].split(',')
        key = keyVal[0][1:-1]
        value = keyVal[1][1:-1]
        return  operation,key,value


    def addToDictionary(key,val):
        print("-----------------------addToDictionary---------------------------")

        data[key]=val
        return 'OK'
    def getFrom(key):
        print("-----------------------getFrom---------------------------")

        try:
            return data[key]
        except:
            return ''

    def appendDictionary(key,val):
        print("-----------------------appendDictionary---------------------------")

        data[key] = val
        return 'OK'

    def sliceDictionary(key,val):
        print("-----------------------sliceDictionary---------------------------")

        value = data[key]
        data[key] = value[val]
        return 'OK'

    def executeOperation(operation,key,val):
        print("-----------------------executeOperation---------------------------")

        function_launch = {
            'put': addToDictionary,
            'get': getFrom,
            'slice': appendDictionary,
            'append': sliceDictionary
        }

        return function_launch[operation](key, val)


    # def receive(msg=('done',), from_=d):
    #     print("---------------ENTERING olympus:receieve:requestConfiguration---------------------")
    #     print("---------------DONE---------------------")


def main():
    print("---------------ENTERING main---------------------")
    olympus = new(Olympus,args=())
    #client = new(Client,args=(olympus,), at='Client')
    #setup(client, args=(olympus,))
    #start(client)
    start(olympus)