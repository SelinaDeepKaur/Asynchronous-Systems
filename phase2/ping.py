# -*- generated by 1.0.9 -*-
import da
PatternExpr_285 = da.pat.TuplePattern([da.pat.ConstantPattern('requestConfiguration')])
PatternExpr_290 = da.pat.FreePattern('p')
PatternExpr_655 = da.pat.ConstantPattern('Configuration')
PatternExpr_678 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration')])
_config_object = {}
import sys
import nacl.utils
from nacl.public import PrivateKey, Box
from nacl.encoding import Base64Encoder

def readConfigFile():
    print('---------------ENTERING readConfigFile ---------------------')
    config = dict()
    with open('config.csv', 'r') as f:
        for line in f:
            if (not (line[0] == '#')):
                (key, sep, val) = line.partition('=')
                if (not (len(sep) == 0)):
                    val = val.strip()
                    config[key.strip()] = (int(val) if str.isdecimal(val) else val)
    print(config)
    return config

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_285, sources=[PatternExpr_290], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_284])])

    def setup(self, **rest_725):
        super().setup(**rest_725)
        self.createInitialConfiguration()
        print()

    def run(self):
        a = False
        self.output('terminating')

    def createInitialConfiguration(self):
        print('---------------ENTERING createInitialConfiguration ---------------------')
        self._state.globalConfig = readConfigFile()
        (self._state.clients, publicKeyClients) = self.createClientProcesses()
        (self._state.replicas, publicKeyReplicas) = self.createReplicaProcesses()
        print(self._state.clients)
        print(self._state.replicas)

    def createKeys(self):
        pass

    def createClientProcesses(self):
        tempClients = []
        tempPublicKeys = dict()
        tempPrivateKeys = dict()
        print('---------------ENTERING CREATE PROCESS---------------------')
        noOfClients = self._state.globalConfig['num_client']
        hosts = self._state.globalConfig['hosts'].split(';')
        client_hosts = self._state.globalConfig['client_hosts'].split(';')
        for i in range(noOfClients):
            processAtNode = ((('Client' + str(i)) + '@') + hosts[int(client_hosts[int(i)].strip())].strip())
            processAtPrKey = PrivateKey.generate()
            processAtPuKey = processAtPrKey.public_key
            tempPrivateKeys[processAtNode] = processAtPrKey
            tempPublicKeys[processAtNode] = processAtPuKey
            client = self.new(Client, at=processAtNode)
            self._setup(client, (self._id, processAtPrKey, processAtPuKey))
            self._start(client)
            tempClients.insert(i, client)
        return (tempClients, tempPublicKeys)

    def createReplicaProcesses(self):
        tempReplicas = []
        tempPublicKeys = dict()
        tempPrivateKeys = dict()
        noOfReplicas = ((2 * self._state.globalConfig['t']) + 1)
        hosts = self._state.globalConfig['hosts'].split(';')
        replica_hosts = self._state.globalConfig['replica_hosts'].split(';')
        for i in range(noOfReplicas):
            processAtNode = ((('Replica' + str(i)) + '@') + hosts[int(replica_hosts[int(i)].strip())].strip())
            processAtPrKey = PrivateKey.generate()
            processAtPuKey = processAtPrKey.public_key
            tempPrivateKeys[processAtNode] = processAtPrKey
            tempPublicKeys[processAtNode] = processAtPuKey
            replica = self.new(Replica, args=(), at=processAtNode)
            self._start(replica)
            tempReplicas.insert(i, replica)
        return (tempReplicas, tempPublicKeys)

    def setupProcesses(self):
        print('---------------ENTERING setupProcesses ---------------------')
        for i in range(noOfClients):
            self._setup(client[i], args=(self._id,))

    def startProcesses(self):
        print('---------------ENTERING startProcesses ---------------------')
        for i in range(noOfClients):
            self._start(client[i])

    def _Olympus_handler_284(self, p):
        print('---------------ENTERING olympus:receieve:requestConfiguration---------------------')
        print(p)
        self.send(('Configuration',), to=p)
    _Olympus_handler_284._labels = None
    _Olympus_handler_284._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_655, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_678, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_677])])

    def setup(self, p, processAtPrKey, processAtPuKey, **rest_725):
        super().setup(p=p, processAtPrKey=processAtPrKey, processAtPuKey=processAtPuKey, **rest_725)
        self._state.p = p
        self._state.processAtPrKey = processAtPrKey
        self._state.processAtPuKey = processAtPuKey
        pass

    def run(self):
        print(self._state.processAtPrKey.encode(Base64Encoder))
        print('---------------ENTERING client:run---------------------')
        self.send(('requestConfiguration',), to=self._state.p)
        super()._label('_st_label_652', block=False)

        def ExistentialOpExpr_653():
            for (_, _, _ConstantPattern666_) in self._ClientReceivedEvent_0:
                if (_ConstantPattern666_ == 'Configuration'):
                    if True:
                        return True
            return False
        _st_label_652 = 0
        while (_st_label_652 == 0):
            _st_label_652 += 1
            if ExistentialOpExpr_653():
                _st_label_652 += 1
            else:
                super()._label('_st_label_652', block=True)
                _st_label_652 -= 1
        self.send(('requestConfiguration',), to=self._state.p)

    def _Client_handler_677(self):
        print('---------------ENTERING client:receieve:Configuration---------------------')
        self.output('Configuration.')
        self.send(('done',), to=self._state.p)
    _Client_handler_677._labels = None
    _Client_handler_677._notlabels = None

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def setup(self, **rest_725):
        super().setup(**rest_725)
        pass

    def run(self):
        print('---------------ENTERING replica:run---------------------')

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        print('---------------ENTERING main---------------------')
        olympus = self.new(Olympus, args=())
        self._start(olympus)
