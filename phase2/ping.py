# -*- generated by 1.0.9 -*-
import da
PatternExpr_339 = da.pat.TuplePattern([da.pat.ConstantPattern('requestConfiguration')])
PatternExpr_358 = da.pat.TuplePattern([da.pat.ConstantPattern('Received Configuration')])
PatternExpr_378 = da.pat.TuplePattern([da.pat.ConstantPattern('requestConfiguration')])
PatternExpr_383 = da.pat.FreePattern('p')
PatternExpr_344 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('requestConfiguration')])])
PatternExpr_363 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Received Configuration')])])
PatternExpr_876 = da.pat.FreePattern('Configuration')
PatternExpr_880 = da.pat.FreePattern('p')
PatternExpr_895 = da.pat.TuplePattern([da.pat.FreePattern('Configuration')])
PatternExpr_900 = da.pat.FreePattern('p')
PatternExpr_1097 = da.pat.TuplePattern([da.pat.FreePattern('clientId'), da.pat.FreePattern('requestID'), da.pat.FreePattern('signedRequestStatement'), da.pat.FreePattern('typeOfRequest')])
PatternExpr_1108 = da.pat.FreePattern('c')
PatternExpr_1129 = da.pat.TuplePattern([da.pat.FreePattern('rho'), da.pat.FreePattern('requestID'), da.pat.FreePattern('signedRequestStatement'), da.pat.FreePattern('typeOfRequest')])
PatternExpr_1137 = da.pat.FreePattern('previousReplica')
PatternExpr_1158 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_1176 = da.pat.TuplePattern([da.pat.FreePattern('clientId'), da.pat.FreePattern('requestID'), da.pat.FreePattern('signedRequestStatement'), da.pat.FreePattern('typeOfRequest')])
PatternExpr_1187 = da.pat.FreePattern('c')
PatternExpr_1292 = da.pat.TuplePattern([da.pat.FreePattern('requestID'), da.pat.FreePattern('signedRequestStatement'), da.pat.FreePattern('typeOfRequest')])
PatternExpr_1301 = da.pat.FreePattern('previousReplica')
PatternExpr_1332 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_1337 = da.pat.FreePattern('d')
PatternExpr_1163 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
_config_object = {}
import sys
import nacl.utils
from random import *
from nacl.public import PrivateKey, Box
from nacl.encoding import Base64Encoder

def readConfigFile():
    print('---------------ENTERING readConfigFile ---------------------')
    config = dict()
    with open('config.csv', 'r') as f:
        for line in f:
            if (not (line[0] == '#')):
                (key, sep, val) = line.partition('=')
                if (not (len(sep) == 0)):
                    val = val.strip()
                    config[key.strip()] = (int(val) if str.isdecimal(val) else val)
    return config

def signTheStatement(box, message):
    return box.encrypt(message)

def createABox(prKey, pubKey):
    return Box(prKey, pubKey)

def unsignTheStatement(box, message):
    return box.decrypt(message)

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_0 = []
        self._OlympusReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_339, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_358, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_378, sources=[PatternExpr_383], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_377])])

    def setup(self, **rest_1365):
        super().setup(**rest_1365)
        print('---------------ENTERING Olymus:setup ---------------------')
        self.initialSetup()
        print()

    def run(self):
        a = False
        super()._label('_st_label_336', block=False)
        _st_label_336 = 0
        while (_st_label_336 == 0):
            _st_label_336 += 1
            if PatternExpr_344.match_iter(self._OlympusReceivedEvent_0, SELF_ID=self._id):
                _st_label_336 += 1
            else:
                super()._label('_st_label_336', block=True)
                _st_label_336 -= 1
        super()._label('_st_label_355', block=False)
        _st_label_355 = 0
        while (_st_label_355 == 0):
            _st_label_355 += 1
            if PatternExpr_363.match_iter(self._OlympusReceivedEvent_1, SELF_ID=self._id):
                _st_label_355 += 1
            else:
                super()._label('_st_label_355', block=True)
                _st_label_355 -= 1
        self.output('terminating')

    def readGlobalConfigFile(self):
        print('---------------ENTERING Olymus:readGlobalConfigFile ---------------------')
        self._state.globalConfig = readConfigFile()

    def initialSetup(self):
        print('---------------ENTERING Olymus:initialSetup ---------------------')
        self._state.globalConfig = readConfigFile()
        (self._state.privateKeyClients, self._state.publicKeyClients) = self.createClientKeys()
        (self._state.privateKeyReplicas, self._state.publicKeyReplicas) = self.createReplicaKeys()
        self._state.clients = self.createClientProcesses(self._state.privateKeyClients)
        self._state.replicas = self.createReplicaProcesses(self._state.privateKeyReplicas, self._state.clients, self._state.publicKeyReplicas)

    def createClientKeys(self):
        print('---------------ENTERING Olymus:createClientKeys ---------------------')
        tempPublicKeys = dict()
        tempPrivateKeys = dict()
        noOfClients = self._state.globalConfig['num_client']
        print(noOfClients)
        for i in range(noOfClients):
            print('---------------Did I reach here Olymus:setup ---------------------')
            processAtPrKey = PrivateKey.generate()
            processAtPuKey = processAtPrKey.public_key
            tempPrivateKeys[i] = processAtPrKey
            tempPublicKeys[i] = processAtPuKey
        print('---------------Did I reach here 2 Olymus:setup ---------------------')
        return (tempPrivateKeys, tempPublicKeys)

    def createReplicaKeys(self):
        print('---------------ENTERING Olymus:createReplicaKeys ---------------------')
        tempPublicKeys = dict()
        tempPrivateKeys = dict()
        noOfReplicas = ((2 * self._state.globalConfig['t']) + 1)
        for i in range(noOfReplicas):
            processAtPrKey = PrivateKey.generate()
            processAtPuKey = processAtPrKey.public_key
            tempPrivateKeys[i] = processAtPrKey
            tempPublicKeys[i] = processAtPuKey
        return (tempPrivateKeys, tempPublicKeys)

    def createClientProcesses(self, privateKeyClients):
        tempClients = []
        tempPublicKeys = dict()
        tempPrivateKeys = dict()
        print('---------------ENTERING CLIENT CREATE PROCESS---------------------')
        noOfClients = self._state.globalConfig['num_client']
        hosts = self._state.globalConfig['hosts'].split(';')
        client_hosts = self._state.globalConfig['client_hosts'].split(';')
        for i in range(noOfClients):
            processAtNode = ((('Client' + str(i)) + '@') + hosts[int(client_hosts[int(i)].strip())].strip())
            client = self.new(Client, at=processAtNode)
            self._setup(client, (self._id, i, privateKeyClients[i]))
            self._start(client)
            tempClients.insert(i, (client, self._state.publicKeyClients[i]))
        return tempClients

    def createReplicaProcesses(self, privateKeyReplicas, clients, publicKeyReplicas):
        print('---------------ENTERING REPLICA CREATE PROCESS---------------------')
        tempReplicas = dict()
        noOfReplicas = ((2 * self._state.globalConfig['t']) + 1)
        hosts = self._state.globalConfig['hosts'].split(';')
        replica_hosts = self._state.globalConfig['replica_hosts'].split(';')
        for i in range(noOfReplicas):
            processAtNode = ((('Replica' + str(i)) + '@') + hosts[int(replica_hosts[int(i)].strip())].strip())
            replica = self.new(Replica, at=processAtNode)
            tempReplicas[i] = (replica, publicKeyReplicas[i])
        for i in range(noOfReplicas):
            self._setup(tempReplicas[i][0], (self._id, i, 'ACTIVE', privateKeyReplicas[i], clients, tempReplicas))
            self._start(tempReplicas[i][0])
        return tempReplicas

    def createConfiguration(self):
        pass

    def setupProcesses(self):
        print('---------------ENTERING setupProcesses ---------------------')
        for i in range(noOfClients):
            self._setup(client[i], args=(self._id,))

    def startProcesses(self):
        print('---------------ENTERING startProcesses ---------------------')
        for i in range(noOfClients):
            self._start(client[i])

    def _Olympus_handler_377(self, p):
        print('---------------ENTERING olympus:receieve:requestConfiguration---------------------')
        print(p)
        Configuration = self._state.replicas
        self.send((Configuration,), to=p)
    _Olympus_handler_377._labels = None
    _Olympus_handler_377._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_876, sources=[PatternExpr_880], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_895, sources=[PatternExpr_900], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_894])])

    def setup(self, p, i, privateKeyClient, **rest_1365):
        super().setup(p=p, i=i, privateKeyClient=privateKeyClient, **rest_1365)
        self._state.p = p
        self._state.i = i
        self._state.privateKeyClient = privateKeyClient
        pass

    def run(self):
        print('---------------ENTERING client:run---------------------')
        self.send(('requestConfiguration',), to=self._state.p)
        super()._label('_st_label_873', block=False)
        p = Configuration = None

        def ExistentialOpExpr_874():
            nonlocal p, Configuration
            for (_, (_, _, self._state.p), Configuration) in self._ClientReceivedEvent_0:
                if True:
                    return True
            return False
        _st_label_873 = 0
        while (_st_label_873 == 0):
            _st_label_873 += 1
            if ExistentialOpExpr_874():
                _st_label_873 += 1
            else:
                super()._label('_st_label_873', block=True)
                _st_label_873 -= 1

    def getOperations(self):
        self._state.globalConfig = readConfigFile()
        print(self._state.i)
        return self._state.globalConfig[(('workload[' + str(self._state.i)) + ']')]

    def sendRequest(self, operation, receiver):
        requestID = self.returnRandomNumber()
        print('requestID: ', requestID)
        print(operation)
        requestStatement = bytes(operation.strip(), 'utf8')
        box = createABox(self._state.privateKeyClient, receiver[1])
        signedRequestStatement = signTheStatement(box, requestStatement)
        print(receiver[0])
        self.send(('done',), to=receiver[0])
        self.send((self._state.i, requestID, signedRequestStatement, 'initial'), to=receiver[0])
        print(signedRequestStatement)

    def returnRandomNumber(self):
        return randint(1, 10000)

    def _Client_handler_894(self, Configuration, p):
        print('---------------ENTERING client:receieve:Configuration---------------------')
        print(len(Configuration))
        for x in range(len(Configuration)):
            print('Replica:', Configuration[x])
        operations = self.getOperations().split(';')
        print(operations)
        for self._state.i in range(len(operations)):
            self.sendRequest(operations[self._state.i], Configuration[0])
        self.send(('Received Configuration',), to=p)
    _Client_handler_894._labels = None
    _Client_handler_894._notlabels = None

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_1 = []
        self._ReplicaReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_1097, sources=[PatternExpr_1108], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_1129, sources=[PatternExpr_1137], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_1158, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_1176, sources=[PatternExpr_1187], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1175]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_1292, sources=[PatternExpr_1301], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1291]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_1332, sources=[PatternExpr_1337], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1331])])

    def setup(self, p, i, Mode, privateKeyReplica, clients, replicas, **rest_1365):
        super().setup(p=p, i=i, Mode=Mode, privateKeyReplica=privateKeyReplica, clients=clients, replicas=replicas, **rest_1365)
        self._state.p = p
        self._state.i = i
        self._state.Mode = Mode
        self._state.privateKeyReplica = privateKeyReplica
        self._state.clients = clients
        self._state.replicas = replicas
        pass

    def run(self):
        print('---------------------ENTERING Replica:run-----------------------')
        print(self._state.p)
        print('------------------printing replicas with their public keys------------')
        print(self._state.replicas)
        super()._label('_st_label_1094', block=False)
        clientId = c = requestID = signedRequestStatement = typeOfRequest = None

        def ExistentialOpExpr_1095():
            nonlocal clientId, c, requestID, signedRequestStatement, typeOfRequest
            for (_, (_, _, c), (clientId, requestID, signedRequestStatement, typeOfRequest)) in self._ReplicaReceivedEvent_0:
                if True:
                    return True
            return False
        _st_label_1094 = 0
        while (_st_label_1094 == 0):
            _st_label_1094 += 1
            if ExistentialOpExpr_1095():
                _st_label_1094 += 1
            else:
                super()._label('_st_label_1094', block=True)
                _st_label_1094 -= 1
        super()._label('_st_label_1126', block=False)
        requestID = signedRequestStatement = previousReplica = typeOfRequest = rho = None

        def ExistentialOpExpr_1127():
            nonlocal requestID, signedRequestStatement, previousReplica, typeOfRequest, rho
            for (_, (_, _, previousReplica), (rho, requestID, signedRequestStatement, typeOfRequest)) in self._ReplicaReceivedEvent_1:
                if True:
                    return True
            return False
        _st_label_1126 = 0
        while (_st_label_1126 == 0):
            _st_label_1126 += 1
            if ExistentialOpExpr_1127():
                _st_label_1126 += 1
            else:
                super()._label('_st_label_1126', block=True)
                _st_label_1126 -= 1
        super()._label('_st_label_1155', block=False)
        _st_label_1155 = 0
        while (_st_label_1155 == 0):
            _st_label_1155 += 1
            if PatternExpr_1163.match_iter(self._ReplicaReceivedEvent_2, SELF_ID=self._id):
                _st_label_1155 += 1
            else:
                super()._label('_st_label_1155', block=True)
                _st_label_1155 -= 1

    def _Replica_handler_1175(self, clientId, requestID, signedRequestStatement, typeOfRequest, c):
        print('---------------------ENTERING Replica:receive:signedRequestStatement-----------------------')
        print('---------------The signed statement with clientID---------------------')
        print(clientId)
        print(signedRequestStatement)
        unSignedRequestStatement = ''
        slot = 0
        operation = ''
        if (self._state.Mode == 'ACTIVE'):
            unbox = createABox(self._state.privateKeyReplica, self._state.clients[clientId][1])
            try:
                unSignedRequestStatement = unsignTheStatement(unbox, signedRequestStatement)
                print('---------------The unsigned statement received from client---------------------')
                print(unSignedRequestStatement)
            except:
                print('Terminate Operation')
        else:
            print('Replica is not active')
        print('-----------------')
        print(self._state.replicas[(self._state.i + 1)])
        print('---------------sending shuttle to next replica0-------------')
        self.send((requestID, signedRequestStatement, 'initial'), to=self._state.replicas[(self._state.i + 1)][0])
        print('-----------------')
    _Replica_handler_1175._labels = None
    _Replica_handler_1175._notlabels = None

    def _Replica_handler_1291(self, requestID, signedRequestStatement, typeOfRequest, previousReplica):
        print('---------------The signed statement from previous replica--------------------')
        print(signedRequestStatement)
        if (not (self._state.i == 2)):
            self.send((requestID, signedRequestStatement, 'initial'), to=self._state.replicas[(self._state.i + 1)][0])
    _Replica_handler_1291._labels = None
    _Replica_handler_1291._notlabels = None

    def _Replica_handler_1331(self, d):
        print('---------------ENTERING olympus:receieve:requestConfiguration---------------------')
        print('---------------DONE---------------------')
    _Replica_handler_1331._labels = None
    _Replica_handler_1331._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        print('---------------ENTERING main---------------------')
        olympus = self.new(Olympus, args=())
        self._start(olympus)
